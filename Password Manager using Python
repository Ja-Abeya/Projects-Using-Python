from cryptography.fernet import Fernet
import json
import os

class PasswordManager:
    def __init__(self, master_password):
        self.master_password = master_password
        self.key = self.generate_key()
        self.file_path = "passwords.json"
        self.passwords = self.load_passwords()

    def generate_key(self):
        if os.path.exists("key.key"):
            return open("key.key", "rb").read()
        else:
            key = Fernet.generate_key()
            with open("key.key", "wb") as key_file:
                key_file.write(key)
            return key

    def load_passwords(self):
        try:
            with open(self.file_path, "rb") as file:
                encrypted_data = file.read()
                decrypted_data = self.decrypt(encrypted_data)
                return json.loads(decrypted_data.decode())
        except (FileNotFoundError, json.JSONDecodeError):
            return {}

    def save_passwords(self):
        encrypted_data = self.encrypt(json.dumps(self.passwords).encode())
        with open(self.file_path, "wb") as file:
            file.write(encrypted_data)

    def encrypt(self, data):
        cipher = Fernet(self.key)
        return cipher.encrypt(data)

    def decrypt(self, data):
        cipher = Fernet(self.key)
        return cipher.decrypt(data)

    def add_password(self, service, username, password):
        if service not in self.passwords:
            self.passwords[service] = {"username": username, "password": password}
            self.save_passwords()
            print(f"Password for {service} added successfully.")
        else:
            print(f"A password for {service} already exists.")

    def get_password(self, service):
        if service in self.passwords:
            username = self.passwords[service]["username"]
            password = self.passwords[service]["password"]
            print(f"Service: {service}\nUsername: {username}\nPassword: {password}")
        else:
            print(f"No password found for {service}.")

if __name__ == "__main__":
    master_password = input("Enter your master password: ")
    password_manager = PasswordManager(master_password)

    while True:
        print("\nPassword Manager Menu:")
        print("1. Add Password")
        print("2. Get Password")
        print("3. Exit")

        choice = input("Enter your choice (1, 2, or 3): ")

        if choice == "1":
            service = input("Enter the service: ")
            username = input("Enter the username: ")
            password = input("Enter the password: ")
            password_manager.add_password(service, username, password)
        elif choice == "2":
            service = input("Enter the service: ")
            password_manager.get_password(service)
        elif choice == "3":
            password_manager.save_passwords()
            print("Password Manager closed.")
            break
        else:
            print("Invalid choice. Please enter 1, 2, or 3.")
